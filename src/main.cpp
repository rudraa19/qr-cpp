#include <iostream>
#include <bitset>
#include <vector>

using namespace std;

#define QR_SIZE 29
#define DATA_BITS 55 * 8
#define EC_BITS 15 * 8
#define QUITE_ZONE 4

int qr[QR_SIZE][QR_SIZE] = {0};
vector<int> dataStream;
vector<int> ecStream;
int divisor[] = {1, 29, 196, 111, 163, 112, 74, 10, 105, 105, 139, 132, 151, 32, 134, 26};
int constantPattern[][2] = {{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 22}, {0, 23}, {0, 24}, {0, 25}, {0, 25}, {0, 25}, {0, 26}, {0, 27}, {0, 28}, {1, 0}, {1, 6}, {1, 22}, {1, 28}, {2, 0}, {2, 2}, {2, 3}, {2, 4}, {2, 6}, {2, 8}, {2, 22}, {2, 24}, {2, 25}, {2, 26}, {2, 28}, {3, 0}, {3, 2}, {3, 3}, {3, 4}, {3, 6}, {3, 22}, {3, 24}, {3, 25}, {3, 26}, {3, 28}, {4, 0}, {4, 2}, {4, 3}, {4, 4}, {4, 6}, {4, 22}, {4, 24}, {4, 25}, {4, 26}, {4, 28}, {5, 0}, {5, 6}, {5, 22}, {5, 28}, {6, 0}, {6, 1}, {6, 2}, {6, 3}, {6, 4}, {6, 5}, {6, 6}, {6, 8}, {6, 10}, {6, 12}, {6, 14}, {6, 16}, {6, 18}, {6, 20}, {6, 22}, {6, 23}, {6, 24}, {6, 25}, {6, 26}, {6, 27}, {6, 28}, {7, 8}, {8, 0}, {8, 1}, {8, 2}, {8, 4}, {8, 5}, {8, 6}, {8, 7}, {8, 8}, {10, 6}, {12, 6}, {14, 6}, {16, 6}, {18, 6}, {20, 6}, {20, 20}, {20, 21}, {20, 22}, {20, 23}, {20, 24}, {21, 8}, {21, 20}, {21, 24}, {22, 0}, {22, 1}, {22, 2}, {22, 3}, {22, 4}, {22, 5}, {22, 6}, {22, 8}, {22, 20}, {22, 22}, {22, 24}, {23, 0}, {23, 6}, {23, 8}, {23, 20}, {23, 24}, {24, 0}, {24, 2}, {24, 3}, {24, 4}, {24, 6}, {24, 8}, {24, 20}, {24, 21}, {24, 22}, {24, 23}, {24, 24}, {25, 0}, {25, 2}, {25, 3}, {25, 4}, {25, 6}, {26, 0}, {26, 2}, {26, 3}, {26, 4}, {26, 6}, {26, 8}, {27, 0}, {27, 6}, {27, 8}, {28, 0}, {28, 1}, {28, 2}, {28, 3}, {28, 4}, {28, 5}, {28, 6}, {28, 8}};
int variableSlots[][2] = {{28, 28}, {28, 27}, {27, 28}, {27, 27}, {26, 28}, {26, 27}, {25, 28}, {25, 27}, {24, 28}, {24, 27}, {23, 28}, {23, 27}, {22, 28}, {22, 27}, {21, 28}, {21, 27}, {20, 28}, {20, 27}, {19, 28}, {19, 27}, {18, 28}, {18, 27}, {17, 28}, {17, 27}, {16, 28}, {16, 27}, {15, 28}, {15, 27}, {14, 28}, {14, 27}, {13, 28}, {13, 27}, {12, 28}, {12, 27}, {11, 28}, {11, 27}, {10, 28}, {10, 27}, {9, 28}, {9, 27}, {9, 26}, {9, 25}, {10, 26}, {10, 25}, {11, 26}, {11, 25}, {12, 26}, {12, 25}, {13, 26}, {13, 25}, {14, 26}, {14, 25}, {15, 26}, {15, 25}, {16, 26}, {16, 25}, {17, 26}, {17, 25}, {18, 26}, {18, 25}, {19, 26}, {19, 25}, {20, 26}, {20, 25}, {21, 26}, {21, 25}, {22, 26}, {22, 25}, {23, 26}, {23, 25}, {24, 26}, {24, 25}, {25, 26}, {25, 25}, {26, 26}, {26, 25}, {27, 26}, {27, 25}, {28, 26}, {28, 25}, {28, 24}, {28, 23}, {27, 24}, {27, 23}, {26, 24}, {26, 23}, {25, 24}, {25, 23}, {19, 24}, {19, 23}, {18, 24}, {18, 23}, {17, 24}, {17, 23}, {16, 24}, {16, 23}, {15, 24}, {15, 23}, {14, 24}, {14, 23}, {13, 24}, {13, 23}, {12, 24}, {12, 23}, {11, 24}, {11, 23}, {10, 24}, {10, 23}, {9, 24}, {9, 23}, {9, 22}, {9, 21}, {10, 22}, {10, 21}, {11, 22}, {11, 21}, {12, 22}, {12, 21}, {13, 22}, {13, 21}, {14, 22}, {14, 21}, {15, 22}, {15, 21}, {16, 22}, {16, 21}, {17, 22}, {17, 21}, {18, 22}, {18, 21}, {19, 22}, {19, 21}, {25, 22}, {25, 21}, {26, 22}, {26, 21}, {27, 22}, {27, 21}, {28, 22}, {28, 21}, {28, 20}, {28, 19}, {27, 20}, {27, 19}, {26, 20}, {26, 19}, {25, 20}, {25, 19}, {24, 19}, {23, 19}, {22, 19}, {21, 19}, {20, 19}, {19, 20}, {19, 19}, {18, 20}, {18, 19}, {17, 20}, {17, 19}, {16, 20}, {16, 19}, {15, 20}, {15, 19}, {14, 20}, {14, 19}, {13, 20}, {13, 19}, {12, 20}, {12, 19}, {11, 20}, {11, 19}, {10, 20}, {10, 19}, {9, 20}, {9, 19}, {8, 20}, {8, 19}, {7, 20}, {7, 19}, {5, 20}, {5, 19}, {4, 20}, {4, 19}, {3, 20}, {3, 19}, {2, 20}, {2, 19}, {1, 20}, {1, 19}, {0, 20}, {0, 19}, {0, 18}, {0, 17}, {1, 18}, {1, 17}, {2, 18}, {2, 17}, {3, 18}, {3, 17}, {4, 18}, {4, 17}, {5, 18}, {5, 17}, {7, 18}, {7, 17}, {8, 18}, {8, 17}, {9, 18}, {9, 17}, {10, 18}, {10, 17}, {11, 18}, {11, 17}, {12, 18}, {12, 17}, {13, 18}, {13, 17}, {14, 18}, {14, 17}, {15, 18}, {15, 17}, {16, 18}, {16, 17}, {17, 18}, {17, 17}, {18, 18}, {18, 17}, {19, 18}, {19, 17}, {20, 18}, {20, 17}, {21, 18}, {21, 17}, {22, 18}, {22, 17}, {23, 18}, {23, 17}, {24, 18}, {24, 17}, {25, 18}, {25, 17}, {26, 18}, {26, 17}, {27, 18}, {27, 17}, {28, 18}, {28, 17}, {28, 16}, {28, 15}, {27, 16}, {27, 15}, {26, 16}, {26, 15}, {25, 16}, {25, 15}, {24, 16}, {24, 15}, {23, 16}, {23, 15}, {22, 16}, {22, 15}, {21, 16}, {21, 15}, {20, 16}, {20, 15}, {19, 16}, {19, 15}, {18, 16}, {18, 15}, {17, 16}, {17, 15}, {16, 16}, {16, 15}, {15, 16}, {15, 15}, {14, 16}, {14, 15}, {13, 16}, {13, 15}, {12, 16}, {12, 15}, {11, 16}, {11, 15}, {10, 16}, {10, 15}, {9, 16}, {9, 15}, {8, 16}, {8, 15}, {7, 16}, {7, 15}, {5, 16}, {5, 15}, {4, 16}, {4, 15}, {3, 16}, {3, 15}, {2, 16}, {2, 15}, {1, 16}, {1, 15}, {0, 16}, {0, 15}, {0, 14}, {0, 13}, {1, 14}, {1, 13}, {2, 14}, {2, 13}, {3, 14}, {3, 13}, {4, 14}, {4, 13}, {5, 14}, {5, 13}, {7, 14}, {7, 13}, {8, 14}, {8, 13}, {9, 14}, {9, 13}, {10, 14}, {10, 13}, {11, 14}, {11, 13}, {12, 14}, {12, 13}, {13, 14}, {13, 13}, {14, 14}, {14, 13}, {15, 14}, {15, 13}, {16, 14}, {16, 13}, {17, 14}, {17, 13}, {18, 14}, {18, 13}, {19, 14}, {19, 13}, {20, 14}, {20, 13}, {21, 14}, {21, 13}, {22, 14}, {22, 13}, {23, 14}, {23, 13}, {24, 14}, {24, 13}, {25, 14}, {25, 13}, {26, 14}, {26, 13}, {27, 14}, {27, 13}, {28, 14}, {28, 13}, {28, 12}, {28, 11}, {27, 12}, {27, 11}, {26, 12}, {26, 11}, {25, 12}, {25, 11}, {24, 12}, {24, 11}, {23, 12}, {23, 11}, {22, 12}, {22, 11}, {21, 12}, {21, 11}, {20, 12}, {20, 11}, {19, 12}, {19, 11}, {18, 12}, {18, 11}, {17, 12}, {17, 11}, {16, 12}, {16, 11}, {15, 12}, {15, 11}, {14, 12}, {14, 11}, {13, 12}, {13, 11}, {12, 12}, {12, 11}, {11, 12}, {11, 11}, {10, 12}, {10, 11}, {9, 12}, {9, 11}, {8, 12}, {8, 11}, {7, 12}, {7, 11}, {5, 12}, {5, 11}, {4, 12}, {4, 11}, {3, 12}, {3, 11}, {2, 12}, {2, 11}, {1, 12}, {1, 11}, {0, 12}, {0, 11}, {0, 10}, {0, 9}, {1, 10}, {1, 9}, {2, 10}, {2, 9}, {3, 10}, {3, 9}, {4, 10}, {4, 9}, {5, 10}, {5, 9}, {7, 10}, {7, 9}, {8, 10}, {8, 9}, {9, 10}, {9, 9}, {10, 10}, {10, 9}, {11, 10}, {11, 9}, {12, 10}, {12, 9}, {13, 10}, {13, 9}, {14, 10}, {14, 9}, {15, 10}, {15, 9}, {16, 10}, {16, 9}, {17, 10}, {17, 9}, {18, 10}, {18, 9}, {19, 10}, {19, 9}, {20, 10}, {20, 9}, {21, 10}, {21, 9}, {22, 10}, {22, 9}, {23, 10}, {23, 9}, {24, 10}, {24, 9}, {25, 10}, {25, 9}, {26, 10}, {26, 9}, {27, 10}, {27, 9}, {28, 10}, {28, 9}, {20, 8}, {20, 7}, {19, 8}, {19, 7}, {18, 8}, {18, 7}, {17, 8}, {17, 7}, {16, 8}, {16, 7}, {15, 8}, {15, 7}, {14, 8}, {14, 7}, {13, 8}, {13, 7}, {12, 8}, {12, 7}, {11, 8}, {11, 7}, {10, 8}, {10, 7}, {9, 8}, {9, 7}, {9, 5}, {9, 4}, {10, 5}, {10, 4}, {11, 5}, {11, 4}, {12, 5}, {12, 4}, {13, 5}, {13, 4}, {14, 5}, {14, 4}, {15, 5}, {15, 4}, {16, 5}, {16, 4}, {17, 5}, {17, 4}, {18, 5}, {18, 4}, {19, 5}, {19, 4}, {20, 5}, {20, 4}, {20, 3}, {20, 2}, {19, 3}, {19, 2}, {18, 3}, {18, 2}, {17, 3}, {17, 2}, {16, 3}, {16, 2}, {15, 3}, {15, 2}, {14, 3}, {14, 2}, {13, 3}, {13, 2}, {12, 3}, {12, 2}, {11, 3}, {11, 2}, {10, 3}, {10, 2}, {9, 3}, {9, 2}, {9, 1}, {9, 0}, {10, 1}, {10, 0}, {11, 1}, {11, 0}, {12, 1}, {12, 0}, {13, 1}, {13, 0}, {14, 1}, {14, 0}, {15, 1}, {15, 0}, {16, 1}, {16, 0}, {17, 1}, {17, 0}, {18, 1}, {18, 0}, {19, 1}, {19, 0}, {20, 1}, {20, 0}};
int mask[][2] = {{28, 28}, {28, 26}, {28, 24}, {28, 22}, {28, 20}, {28, 18}, {28, 16}, {28, 14}, {28, 12}, {28, 10}, {27, 9}, {27, 11}, {27, 13}, {27, 15}, {27, 17}, {27, 19}, {27, 21}, {27, 23}, {27, 25}, {27, 27}, {26, 28}, {26, 26}, {26, 24}, {26, 22}, {26, 20}, {26, 18}, {26, 16}, {26, 14}, {26, 12}, {26, 10}, {25, 9}, {25, 11}, {25, 13}, {25, 15}, {25, 17}, {25, 19}, {25, 21}, {25, 23}, {25, 25}, {25, 27}, {24, 28}, {24, 26}, {24, 18}, {24, 16}, {24, 14}, {24, 12}, {24, 10}, {23, 9}, {23, 11}, {23, 13}, {23, 15}, {23, 17}, {23, 19}, {23, 25}, {23, 27}, {22, 28}, {22, 26}, {22, 18}, {22, 16}, {22, 14}, {22, 12}, {22, 10}, {21, 9}, {21, 11}, {21, 13}, {21, 15}, {21, 17}, {21, 19}, {21, 25}, {21, 27}, {20, 28}, {20, 26}, {20, 18}, {20, 16}, {20, 14}, {20, 12}, {20, 10}, {20, 8}, {20, 4}, {20, 2}, {20, 0}, {19, 1}, {19, 3}, {19, 5}, {19, 7}, {19, 9}, {19, 11}, {19, 13}, {19, 15}, {19, 17}, {19, 19}, {19, 21}, {19, 23}, {19, 25}, {19, 27}, {18, 28}, {18, 26}, {18, 24}, {18, 22}, {18, 20}, {18, 18}, {18, 16}, {18, 14}, {18, 12}, {18, 10}, {18, 8}, {18, 4}, {18, 2}, {18, 0}, {17, 1}, {17, 3}, {17, 5}, {17, 7}, {17, 9}, {17, 11}, {17, 13}, {17, 15}, {17, 17}, {17, 19}, {17, 21}, {17, 23}, {17, 25}, {17, 27}, {16, 28}, {16, 26}, {16, 24}, {16, 22}, {16, 20}, {16, 18}, {16, 16}, {16, 14}, {16, 12}, {16, 10}, {16, 8}, {16, 4}, {16, 2}, {16, 0}, {15, 1}, {15, 3}, {15, 5}, {15, 7}, {15, 9}, {15, 11}, {15, 13}, {15, 15}, {15, 17}, {15, 19}, {15, 21}, {15, 23}, {15, 25}, {15, 27}, {14, 28}, {14, 26}, {14, 24}, {14, 22}, {14, 20}, {14, 18}, {14, 16}, {14, 14}, {14, 12}, {14, 10}, {14, 8}, {14, 4}, {14, 2}, {14, 0}, {13, 1}, {13, 3}, {13, 5}, {13, 7}, {13, 9}, {13, 11}, {13, 13}, {13, 15}, {13, 17}, {13, 19}, {13, 21}, {13, 23}, {13, 25}, {13, 27}, {12, 28}, {12, 26}, {12, 24}, {12, 22}, {12, 20}, {12, 18}, {12, 16}, {12, 14}, {12, 12}, {12, 10}, {12, 8}, {12, 4}, {12, 2}, {12, 0}, {11, 1}, {11, 3}, {11, 5}, {11, 7}, {11, 9}, {11, 11}, {11, 13}, {11, 15}, {11, 17}, {11, 19}, {11, 21}, {11, 23}, {11, 25}, {11, 27}, {10, 28}, {10, 26}, {10, 24}, {10, 22}, {10, 20}, {10, 18}, {10, 16}, {10, 14}, {10, 12}, {10, 10}, {10, 8}, {10, 4}, {10, 2}, {10, 0}, {9, 1}, {9, 3}, {9, 5}, {9, 7}, {9, 9}, {9, 11}, {9, 13}, {9, 15}, {9, 17}, {9, 19}, {9, 21}, {9, 23}, {9, 25}, {9, 27}, {8, 20}, {8, 18}, {8, 16}, {8, 14}, {8, 12}, {8, 10}, {7, 9}, {7, 11}, {7, 13}, {7, 15}, {7, 17}, {7, 19}, {5, 19}, {5, 17}, {5, 15}, {5, 13}, {5, 11}, {5, 9}, {4, 10}, {4, 12}, {4, 14}, {4, 16}, {4, 18}, {4, 20}, {3, 19}, {3, 17}, {3, 15}, {3, 13}, {3, 11}, {3, 9}, {2, 10}, {2, 12}, {2, 14}, {2, 16}, {2, 18}, {2, 20}, {1, 19}, {1, 17}, {1, 15}, {1, 13}, {1, 11}, {1, 9}, {0, 10}, {0, 12}, {0, 14}, {0, 16}, {0, 18}, {0, 20}};

void printQr();
void getDataStream(string inp);
void printArr(vector<int> arr);
int gfMul(int a, int b);
void polynomialDivide();
void assignConstantPattern();
void fillVariableSlots();
void assignMask();

int main()
{
    string inp;
    cout << "Enter your message: ";
    getline(cin, inp);

    getDataStream(inp);
    printArr(dataStream);

    polynomialDivide();
    cout << endl;
    printArr(ecStream);

    assignConstantPattern();
    fillVariableSlots();

    assignMask();

    printQr();
    return 0;
}

void printQr()
{
    int totalSize = QR_SIZE + (2 * QUITE_ZONE);
    int expandedQR[totalSize][totalSize];

    for (int i = 0; i < totalSize; i++)
    {
        for (int j = 0; j < totalSize; j++)
        {
            expandedQR[i][j] = 0;
        }
    }

    for (int i = 0; i < QR_SIZE; i++)
    {
        for (int j = 0; j < QR_SIZE; j++)
        {
            expandedQR[i + QUITE_ZONE][j + QUITE_ZONE] = qr[i][j];
        }
    }

    for (int i = 0; i < totalSize; i += 2)
    {
        for (int j = 0; j < totalSize; j++)
        {
            int top = expandedQR[i][j];
            int bottom = 0;

            if (i + 1 < totalSize)
            {
                bottom = expandedQR[i + 1][j];
            }

            if (top == 1 && bottom == 1)
                cout << " ";
            else if (top == 1 && bottom == 0)
                cout << "▄";
            else if (top == 0 && bottom == 1)
                cout << "▀";
            else
                cout << "█";
        }
        cout << endl;
    }
}

void getDataStream(string inp)
{
    dataStream.push_back(0);
    dataStream.push_back(1);
    dataStream.push_back(0);
    dataStream.push_back(0);

    string temp = bitset<8>(inp.length()).to_string();
    for (char i : temp)
    {
        dataStream.push_back(i - '0');
    }

    for (char i : inp)
    {
        string t = bitset<8>(i).to_string();
        for (char j : t)
        {
            dataStream.push_back(j - '0');
        }
    }

    dataStream.push_back(0);
    dataStream.push_back(0);
    dataStream.push_back(0);
    dataStream.push_back(0);

    bool flag = false;
    for (int i = dataStream.size(); i < DATA_BITS; i += 8)
    {
        if (!flag)
        {
            dataStream.push_back(1);
            dataStream.push_back(1);
            dataStream.push_back(1);
            dataStream.push_back(0);
            dataStream.push_back(1);
            dataStream.push_back(1);
            dataStream.push_back(0);
            dataStream.push_back(0);
        }
        else
        {
            dataStream.push_back(0);
            dataStream.push_back(0);
            dataStream.push_back(0);
            dataStream.push_back(1);
            dataStream.push_back(0);
            dataStream.push_back(0);
            dataStream.push_back(0);
            dataStream.push_back(1);
        }
        flag = !flag;
    }
}

int gfMul(int a, int b)
{
    int result = 0;
    while (b)
    {
        if (b & 1)
            result ^= a;
        a <<= 1;
        if (a & 0x100)
            a ^= 0x11D;
        b >>= 1;
    }
    return result;
}

void polynomialDivide()
{
    vector<int> messageBytes;
    for (int i = 0; i < dataStream.size(); i += 8)
    {
        int byte = 0;
        for (int j = 0; j < 8; j++)
        {
            byte = (byte << 1) | dataStream[i + j];
        }
        messageBytes.push_back(byte);
    }

    vector<int> remainder = messageBytes;
    while (remainder.size() < messageBytes.size() + EC_BITS / 8)
    {
        remainder.push_back(0);
    }

    int divisorLen = EC_BITS / 8 + 1;
    for (int i = 0; i < messageBytes.size(); i++)
    {
        int coef = remainder[i];
        if (coef != 0)
        {
            for (int j = 0; j < divisorLen; j++)
            {
                remainder[i + j] ^= gfMul(divisor[j], coef);
            }
        }
    }

    for (int i = messageBytes.size(); i < remainder.size(); i++)
    {
        string bits = bitset<8>(remainder[i]).to_string();
        for (int j = 0; j < 8; j++)
        {
            ecStream.push_back(bits[j] - '0');
        }
    }
}

void assignConstantPattern()
{
    for (auto c : constantPattern)
    {
        qr[c[0]][c[1]] = 1;
    }
}

void fillVariableSlots()
{
    for (int i = 0; i < DATA_BITS; i++)
    {
        qr[variableSlots[i][0]][variableSlots[i][1]] = dataStream[i];
    }
    for (int i = 0; i < EC_BITS; i++)
    {
        qr[variableSlots[i + DATA_BITS][0]][variableSlots[i + DATA_BITS][1]] = ecStream[i];
    }
}

void assignMask()
{
    for (auto t : mask)
    {
        qr[t[0]][t[1]] = !qr[t[0]][t[1]];
    }
}

void printArr(vector<int> arr)
{
    for (int i = 0; i < arr.size(); i++)
    {
        cout << arr[i];
        if ((i + 1) % 8 == 0)
        {
            cout << " ";
        }
        if ((i + 1) % (8 * 5) == 0)
        {
            cout << endl;
        }
    }
    cout << endl;
}
